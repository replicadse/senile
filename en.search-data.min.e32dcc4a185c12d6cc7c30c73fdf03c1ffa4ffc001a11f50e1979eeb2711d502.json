[{"id":0,"href":"/senile/docs/command-reference/","title":"Command Reference","section":"Docs","content":"Disclaimer All features that are marked as experimental are not considered a public API and therefore eplicitly not covered by the backwards-compatibility policy inside a major version (see semver v2). Use these features on your own risk!\n   Commands     Command Description Status     help\n Prints the help to STDOUT\n stable\n   collect\n Collects the todo statements\n stable\n      Application level arguments     Name Short Long Description     Experimental\n -e\n --experimental\n Activates experimental features that are not stable yet. All features that are marked as experimental are ignored when keeping backwards compatibility inside one major version.\n      "},{"id":1,"href":"/senile/docs/command-reference/collect/","title":"Collect","section":"Command Reference","content":"collect command reference     Name Short Long Description Remark Status Multiple     Path\n -p\n --path\n The path from which to start traversal.\n None\n stable\n no\n   Workers\n -w\n --workers\n The amount of workers (threads) used when parsing the collected files.\n None\n stable\n no\n   Filter\n -f\n --filter\n The regex for filtering the files that are to be parsed.\n None\n stable\n no\n   Format\n  --format\n The format of the todo statements that are parsed. It is the start literal followed by the end literal, separated with a comma.\n Example: --format=\"// TODO::(,):\"\n stable\n yes\n    Examples   Basic usage:\nsenile collect\n  Specifying the root directory:\nsenile collect -p ./src\n  Specifying the file filter regex (only .rs files):\nsenile collect -f=\"\\.rs$\"\n  Specifying the todo statement format:\nsenile collect --format=\"## TODO~[[,]]:\"\n  Specifying more formats:\nsenile collect --format=\"// TODO!(,):\" --format=\"## TODO~[[,]]:\"\n    Output The collect command searches for all todo statements recursively from the given directory/file (tree). It collects information about the todo body, the priority, the file and the line in that file.\\ It will output a json formatted string to STDOUT as follows:\\\n [ { \"prio\": \"$priority\", \"assignee\": \"$assignee\", \"body\": \"$todo_body\", \"context\": [ \"$context_line\", \"$context_line\", ... ], \"file\": \"$fq_relative_file_path\", \"line\": $line }, ... ]     Note  These entries are string-sorted by their assigned priority.      Default ToDo statement format in code The default format is // TODO!($priority, $assignee, $context_lines_below): $content.\\ The priority and assignee are self explanatory. You can specify whatever string you want inside them.\\ The $context_lines_below argument tells the tool how many lines it shall include below your comment as context.\n    "},{"id":2,"href":"/senile/docs/home/","title":"Home","section":"Docs","content":"Home     \n \n \n \n   \n \n \n \n   \n \n \n     senile is a ToDo statement collection and aggregation program written in Rust. It\u0026#8217;s primary use case is the collection of open ToDo items within sourcecode, especially within a CI environment.\nIt\u0026#8217;s use shall counteract the habit of writing ToDo statements for eternity and forgetting about them until it\u0026#8217;s too late (like \"ToDo: add security to API endpoint\" as comment in the deployed production branch).\n   "},{"id":3,"href":"/senile/docs/installation/","title":"Installation","section":"Docs","content":"Installation Installing senile can be done on numerous ways.\n The Rust way (via cargo) cargo install senile    The Arch way via AUR (with yay): yay -S senile    The AppImage way (x86_64 example): curl -fSsL https://github.com/replicadse/senile/releases/latest/download/AppImage.x86_64.tar.gz \u0026gt; senile.AppImage.x86_64.tar.gz tar -xvzf ./senile.AppImage.x86_64.tar.gz rm ./senile.AppImage.x86_64.tar.gz chmod +x senile-x86_64.AppImage mkdir -p ~/bin mv senile-x86_64.AppImage ~/bin     Note  You might want to replace the x86_64 part in the script above with your architecture.      The Docker way docker run --rm -v $HOST_PATH:/app/targets/mnt:ro replicadse/senile:latest collect -p=/app/targets      "},{"id":4,"href":"/senile/docs/todos/","title":"Todos","section":"Docs","content":"ToDos senile uses itself in it\u0026#8217;s build pipeline. These are the currently open ToDos in the project itself:\n min   prio: aw\nassignee: min\nbody: Wow, it actually works!\ncontext: ` fn main() \u0026#8594; Result\u0026lt;(), Box\u0026lt;dyn Error\u0026gt;\u0026gt; { `\nfile: ./src/main.rs\nline: 21\n      "}]